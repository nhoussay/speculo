// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: speculod/settlement/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a34191ee64b8ab64, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a34191ee64b8ab64, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryCommitsRequest is request type for the Query/Commits RPC method.
type QueryCommitsRequest struct {
	MarketId uint64 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryCommitsRequest) Reset()         { *m = QueryCommitsRequest{} }
func (m *QueryCommitsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCommitsRequest) ProtoMessage()    {}
func (*QueryCommitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a34191ee64b8ab64, []int{2}
}
func (m *QueryCommitsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommitsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommitsRequest.Merge(m, src)
}
func (m *QueryCommitsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommitsRequest proto.InternalMessageInfo

func (m *QueryCommitsRequest) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

// QueryCommitsResponse is response type for the Query/Commits RPC method.
type QueryCommitsResponse struct {
	Commits []VoteCommit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits"`
}

func (m *QueryCommitsResponse) Reset()         { *m = QueryCommitsResponse{} }
func (m *QueryCommitsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCommitsResponse) ProtoMessage()    {}
func (*QueryCommitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a34191ee64b8ab64, []int{3}
}
func (m *QueryCommitsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommitsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommitsResponse.Merge(m, src)
}
func (m *QueryCommitsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommitsResponse proto.InternalMessageInfo

func (m *QueryCommitsResponse) GetCommits() []VoteCommit {
	if m != nil {
		return m.Commits
	}
	return nil
}

// QueryRevealsRequest is request type for the Query/Reveals RPC method.
type QueryRevealsRequest struct {
	MarketId uint64 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryRevealsRequest) Reset()         { *m = QueryRevealsRequest{} }
func (m *QueryRevealsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRevealsRequest) ProtoMessage()    {}
func (*QueryRevealsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a34191ee64b8ab64, []int{4}
}
func (m *QueryRevealsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRevealsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRevealsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRevealsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRevealsRequest.Merge(m, src)
}
func (m *QueryRevealsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRevealsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRevealsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRevealsRequest proto.InternalMessageInfo

func (m *QueryRevealsRequest) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

// QueryRevealsResponse is response type for the Query/Reveals RPC method.
type QueryRevealsResponse struct {
	Reveals []VoteReveal `protobuf:"bytes,1,rep,name=reveals,proto3" json:"reveals"`
}

func (m *QueryRevealsResponse) Reset()         { *m = QueryRevealsResponse{} }
func (m *QueryRevealsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRevealsResponse) ProtoMessage()    {}
func (*QueryRevealsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a34191ee64b8ab64, []int{5}
}
func (m *QueryRevealsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRevealsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRevealsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRevealsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRevealsResponse.Merge(m, src)
}
func (m *QueryRevealsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRevealsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRevealsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRevealsResponse proto.InternalMessageInfo

func (m *QueryRevealsResponse) GetReveals() []VoteReveal {
	if m != nil {
		return m.Reveals
	}
	return nil
}

// QueryOutcomeRequest is request type for the Query/Outcome RPC method.
type QueryOutcomeRequest struct {
	MarketId uint64 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryOutcomeRequest) Reset()         { *m = QueryOutcomeRequest{} }
func (m *QueryOutcomeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutcomeRequest) ProtoMessage()    {}
func (*QueryOutcomeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a34191ee64b8ab64, []int{6}
}
func (m *QueryOutcomeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutcomeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutcomeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutcomeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutcomeRequest.Merge(m, src)
}
func (m *QueryOutcomeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutcomeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutcomeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutcomeRequest proto.InternalMessageInfo

func (m *QueryOutcomeRequest) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

// QueryOutcomeResponse is response type for the Query/Outcome RPC method.
type QueryOutcomeResponse struct {
	Outcome string `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (m *QueryOutcomeResponse) Reset()         { *m = QueryOutcomeResponse{} }
func (m *QueryOutcomeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutcomeResponse) ProtoMessage()    {}
func (*QueryOutcomeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a34191ee64b8ab64, []int{7}
}
func (m *QueryOutcomeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutcomeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutcomeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutcomeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutcomeResponse.Merge(m, src)
}
func (m *QueryOutcomeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutcomeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutcomeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutcomeResponse proto.InternalMessageInfo

func (m *QueryOutcomeResponse) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "speculod.settlement.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "speculod.settlement.v1.QueryParamsResponse")
	proto.RegisterType((*QueryCommitsRequest)(nil), "speculod.settlement.v1.QueryCommitsRequest")
	proto.RegisterType((*QueryCommitsResponse)(nil), "speculod.settlement.v1.QueryCommitsResponse")
	proto.RegisterType((*QueryRevealsRequest)(nil), "speculod.settlement.v1.QueryRevealsRequest")
	proto.RegisterType((*QueryRevealsResponse)(nil), "speculod.settlement.v1.QueryRevealsResponse")
	proto.RegisterType((*QueryOutcomeRequest)(nil), "speculod.settlement.v1.QueryOutcomeRequest")
	proto.RegisterType((*QueryOutcomeResponse)(nil), "speculod.settlement.v1.QueryOutcomeResponse")
}

func init() {
	proto.RegisterFile("speculod/settlement/v1/query.proto", fileDescriptor_a34191ee64b8ab64)
}

var fileDescriptor_a34191ee64b8ab64 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xb1, 0x6f, 0xd3, 0x40,
	0x14, 0xc6, 0x63, 0x08, 0x09, 0xbd, 0x4e, 0x1c, 0x11, 0xaa, 0x52, 0x64, 0x2a, 0x23, 0xa1, 0xa8,
	0x05, 0x1f, 0x49, 0xc5, 0xc6, 0x14, 0x26, 0x26, 0xc0, 0x48, 0x0c, 0x5d, 0xaa, 0x4b, 0xf2, 0x64,
	0x59, 0xe4, 0xfc, 0x5c, 0xdf, 0xc5, 0xa2, 0x42, 0x2c, 0x6c, 0x6c, 0x48, 0x4c, 0xfc, 0x47, 0x1d,
	0x2b, 0xb1, 0x30, 0x21, 0x94, 0x20, 0xf1, 0x6f, 0xa0, 0xdc, 0x9d, 0xdd, 0xba, 0xc5, 0xb5, 0xbb,
	0x44, 0x97, 0x97, 0xef, 0x7b, 0xf7, 0xbb, 0xf7, 0x3e, 0x85, 0x78, 0x32, 0x81, 0xe9, 0x62, 0x8e,
	0x33, 0x26, 0x41, 0xa9, 0x39, 0x08, 0x88, 0x15, 0xcb, 0x86, 0xec, 0x68, 0x01, 0xe9, 0xb1, 0x9f,
	0xa4, 0xa8, 0x90, 0xde, 0xcb, 0x35, 0xfe, 0x99, 0xc6, 0xcf, 0x86, 0xfd, 0x3b, 0x5c, 0x44, 0x31,
	0x32, 0xfd, 0x69, 0xa4, 0xfd, 0xdd, 0x29, 0x4a, 0x81, 0x92, 0x4d, 0xb8, 0x04, 0xd3, 0x83, 0x65,
	0xc3, 0x09, 0x28, 0x3e, 0x64, 0x09, 0x0f, 0xa3, 0x98, 0xab, 0x08, 0x63, 0xab, 0xed, 0x85, 0x18,
	0xa2, 0x3e, 0xb2, 0xf5, 0xc9, 0x56, 0xef, 0x87, 0x88, 0xe1, 0x1c, 0x18, 0x4f, 0x22, 0xc6, 0xe3,
	0x18, 0x95, 0xb6, 0x48, 0xfb, 0xeb, 0xc3, 0x0a, 0xdc, 0x84, 0xa7, 0x5c, 0xe4, 0xa2, 0x41, 0x85,
	0x28, 0x43, 0x05, 0x87, 0x53, 0x14, 0x22, 0x52, 0x4d, 0x94, 0x29, 0x64, 0xc0, 0xe7, 0x46, 0xe9,
	0xf5, 0x08, 0x7d, 0xb3, 0x7e, 0xce, 0x6b, 0x7d, 0x51, 0x00, 0x47, 0x0b, 0x90, 0xca, 0x7b, 0x4b,
	0xee, 0x96, 0xaa, 0x32, 0xc1, 0x58, 0x02, 0x7d, 0x4e, 0x3a, 0x06, 0x68, 0xcb, 0xd9, 0x71, 0x06,
	0x9b, 0x23, 0xd7, 0xff, 0xff, 0x04, 0x7d, 0xe3, 0x1b, 0xb7, 0x4f, 0x7e, 0x3d, 0x68, 0x05, 0xd6,
	0xe3, 0x8d, 0x6c, 0xd3, 0x17, 0x9a, 0x34, 0xbf, 0x8b, 0x6e, 0x93, 0x0d, 0xc1, 0xd3, 0xf7, 0xa0,
	0x0e, 0xa3, 0x99, 0xee, 0xdb, 0x0e, 0x6e, 0x9b, 0xc2, 0xcb, 0x99, 0x77, 0x40, 0x7a, 0x65, 0x8f,
	0x25, 0x19, 0x93, 0xae, 0x79, 0xf0, 0x1a, 0xe5, 0xe6, 0x60, 0x73, 0xe4, 0x55, 0xa1, 0xbc, 0x43,
	0x05, 0xc6, 0x6d, 0x71, 0x72, 0x63, 0xc1, 0x13, 0xe8, 0x79, 0x5c, 0x8f, 0xa7, 0xf0, 0x9c, 0xf1,
	0x98, 0xb1, 0x36, 0xe2, 0x31, 0xee, 0x9c, 0xc7, 0x1a, 0x0b, 0x9e, 0x57, 0x0b, 0x35, 0x45, 0x01,
	0x8d, 0x78, 0x9e, 0x5a, 0x9e, 0xc2, 0x63, 0x79, 0xb6, 0x48, 0x17, 0x4d, 0x49, 0x5b, 0x36, 0x82,
	0xfc, 0xeb, 0xe8, 0x6f, 0x9b, 0xdc, 0xd2, 0x16, 0xfa, 0xc5, 0x21, 0x1d, 0xb3, 0x28, 0xba, 0x5b,
	0x45, 0x7b, 0x39, 0x1b, 0xfd, 0xbd, 0x46, 0x5a, 0xc3, 0xe1, 0x3d, 0xfa, 0xfc, 0xe3, 0xcf, 0xb7,
	0x1b, 0x3b, 0xd4, 0x65, 0x57, 0x06, 0x9c, 0x7e, 0x77, 0x48, 0xd7, 0xee, 0x98, 0x5e, 0x7d, 0x41,
	0x39, 0x3d, 0xfd, 0xc7, 0xcd, 0xc4, 0x16, 0x67, 0x5f, 0xe3, 0x3c, 0xa1, 0x7b, 0x55, 0x38, 0x36,
	0x1b, 0xec, 0x63, 0x31, 0xf2, 0x4f, 0x9a, 0xcd, 0xee, 0xbb, 0x86, 0xad, 0x9c, 0xa4, 0x1a, 0xb6,
	0x0b, 0x11, 0xaa, 0x67, 0xb3, 0x39, 0xb9, 0xc4, 0x66, 0x77, 0x5f, 0xc3, 0x56, 0x4e, 0x55, 0x0d,
	0xdb, 0x85, 0x38, 0xd5, 0xb3, 0xd9, 0x74, 0x9d, 0x67, 0x1b, 0x3f, 0x3b, 0x59, 0xba, 0xce, 0xe9,
	0xd2, 0x75, 0x7e, 0x2f, 0x5d, 0xe7, 0xeb, 0xca, 0x6d, 0x9d, 0xae, 0xdc, 0xd6, 0xcf, 0x95, 0xdb,
	0x3a, 0xd8, 0x2e, 0xba, 0x7c, 0x38, 0xdf, 0x47, 0x1d, 0x27, 0x20, 0x27, 0x1d, 0xfd, 0xc7, 0xb4,
	0xff, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x51, 0xf7, 0xe9, 0xc2, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Commits queries all vote commits for a market.
	Commits(ctx context.Context, in *QueryCommitsRequest, opts ...grpc.CallOption) (*QueryCommitsResponse, error)
	// Reveals queries all vote reveals for a market.
	Reveals(ctx context.Context, in *QueryRevealsRequest, opts ...grpc.CallOption) (*QueryRevealsResponse, error)
	// Outcome queries the final outcome for a market.
	Outcome(ctx context.Context, in *QueryOutcomeRequest, opts ...grpc.CallOption) (*QueryOutcomeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/speculod.settlement.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Commits(ctx context.Context, in *QueryCommitsRequest, opts ...grpc.CallOption) (*QueryCommitsResponse, error) {
	out := new(QueryCommitsResponse)
	err := c.cc.Invoke(ctx, "/speculod.settlement.v1.Query/Commits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reveals(ctx context.Context, in *QueryRevealsRequest, opts ...grpc.CallOption) (*QueryRevealsResponse, error) {
	out := new(QueryRevealsResponse)
	err := c.cc.Invoke(ctx, "/speculod.settlement.v1.Query/Reveals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Outcome(ctx context.Context, in *QueryOutcomeRequest, opts ...grpc.CallOption) (*QueryOutcomeResponse, error) {
	out := new(QueryOutcomeResponse)
	err := c.cc.Invoke(ctx, "/speculod.settlement.v1.Query/Outcome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Commits queries all vote commits for a market.
	Commits(context.Context, *QueryCommitsRequest) (*QueryCommitsResponse, error)
	// Reveals queries all vote reveals for a market.
	Reveals(context.Context, *QueryRevealsRequest) (*QueryRevealsResponse, error)
	// Outcome queries the final outcome for a market.
	Outcome(context.Context, *QueryOutcomeRequest) (*QueryOutcomeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Commits(ctx context.Context, req *QueryCommitsRequest) (*QueryCommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commits not implemented")
}
func (*UnimplementedQueryServer) Reveals(ctx context.Context, req *QueryRevealsRequest) (*QueryRevealsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reveals not implemented")
}
func (*UnimplementedQueryServer) Outcome(ctx context.Context, req *QueryOutcomeRequest) (*QueryOutcomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Outcome not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speculod.settlement.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Commits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Commits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speculod.settlement.v1.Query/Commits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Commits(ctx, req.(*QueryCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reveals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRevealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reveals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speculod.settlement.v1.Query/Reveals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reveals(ctx, req.(*QueryRevealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Outcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutcomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Outcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speculod.settlement.v1.Query/Outcome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Outcome(ctx, req.(*QueryOutcomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "speculod.settlement.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Commits",
			Handler:    _Query_Commits_Handler,
		},
		{
			MethodName: "Reveals",
			Handler:    _Query_Reveals_Handler,
		},
		{
			MethodName: "Outcome",
			Handler:    _Query_Outcome_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "speculod/settlement/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCommitsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommitsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommitsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCommitsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommitsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommitsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commits) > 0 {
		for iNdEx := len(m.Commits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRevealsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRevealsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRevealsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRevealsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRevealsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRevealsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reveals) > 0 {
		for iNdEx := len(m.Reveals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reveals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutcomeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutcomeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutcomeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutcomeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutcomeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutcomeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Outcome) > 0 {
		i -= len(m.Outcome)
		copy(dAtA[i:], m.Outcome)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Outcome)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCommitsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	return n
}

func (m *QueryCommitsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commits) > 0 {
		for _, e := range m.Commits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRevealsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	return n
}

func (m *QueryRevealsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reveals) > 0 {
		for _, e := range m.Reveals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOutcomeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	return n
}

func (m *QueryOutcomeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Outcome)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommitsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommitsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommitsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommitsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommitsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommitsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commits = append(m.Commits, VoteCommit{})
			if err := m.Commits[len(m.Commits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRevealsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRevealsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRevealsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRevealsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRevealsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRevealsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reveals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reveals = append(m.Reveals, VoteReveal{})
			if err := m.Reveals[len(m.Reveals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutcomeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutcomeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutcomeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutcomeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutcomeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutcomeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outcome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

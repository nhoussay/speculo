// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: speculod/prediction/v1/prediction_market.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PredictionMarket defines the PredictionMarket message.
type PredictionMarket struct {
	Id           uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Question     string   `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	Outcomes     []string `protobuf:"bytes,3,rep,name=outcomes,proto3" json:"outcomes,omitempty"`
	GroupId      string   `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Deadline     int64    `protobuf:"varint,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Status       string   `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Creator      string   `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt    int64    `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	TotalPool    int64    `protobuf:"varint,9,opt,name=total_pool,json=totalPool,proto3" json:"total_pool,omitempty"`
	OutcomePools []string `protobuf:"bytes,10,rep,name=outcome_pools,json=outcomePools,proto3" json:"outcome_pools,omitempty"`
}

func (m *PredictionMarket) Reset()         { *m = PredictionMarket{} }
func (m *PredictionMarket) String() string { return proto.CompactTextString(m) }
func (*PredictionMarket) ProtoMessage()    {}
func (*PredictionMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_aef2310ad3abc47c, []int{0}
}
func (m *PredictionMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PredictionMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PredictionMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PredictionMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredictionMarket.Merge(m, src)
}
func (m *PredictionMarket) XXX_Size() int {
	return m.Size()
}
func (m *PredictionMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_PredictionMarket.DiscardUnknown(m)
}

var xxx_messageInfo_PredictionMarket proto.InternalMessageInfo

func (m *PredictionMarket) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PredictionMarket) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

func (m *PredictionMarket) GetOutcomes() []string {
	if m != nil {
		return m.Outcomes
	}
	return nil
}

func (m *PredictionMarket) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *PredictionMarket) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *PredictionMarket) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PredictionMarket) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *PredictionMarket) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *PredictionMarket) GetTotalPool() int64 {
	if m != nil {
		return m.TotalPool
	}
	return 0
}

func (m *PredictionMarket) GetOutcomePools() []string {
	if m != nil {
		return m.OutcomePools
	}
	return nil
}

func init() {
	proto.RegisterType((*PredictionMarket)(nil), "speculod.prediction.v1.PredictionMarket")
}

func init() {
	proto.RegisterFile("speculod/prediction/v1/prediction_market.proto", fileDescriptor_aef2310ad3abc47c)
}

var fileDescriptor_aef2310ad3abc47c = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xeb, 0xb4, 0x5f, 0xff, 0x58, 0x1f, 0x08, 0x79, 0xa8, 0x0c, 0x08, 0x2b, 0x82, 0xa5,
	0x53, 0xaa, 0x0a, 0xf1, 0x00, 0xb0, 0x31, 0x20, 0x55, 0x19, 0x59, 0x22, 0x13, 0x5b, 0xc8, 0x22,
	0xed, 0x35, 0xf6, 0x4d, 0x05, 0x6f, 0xc1, 0x53, 0xf0, 0x2c, 0x8c, 0x1d, 0x19, 0x51, 0xf2, 0x22,
	0x28, 0x6e, 0x1a, 0xba, 0xf9, 0x77, 0xce, 0xb9, 0x47, 0xb6, 0x2f, 0x4d, 0xbc, 0xd5, 0x79, 0x59,
	0x80, 0x9a, 0x5b, 0xa7, 0x95, 0xc9, 0xd1, 0xc0, 0x7a, 0xbe, 0x59, 0x1c, 0x50, 0xb6, 0x92, 0xee,
	0x45, 0x63, 0x62, 0x1d, 0x20, 0xb0, 0xe9, 0x3e, 0x9f, 0xfc, 0x25, 0x92, 0xcd, 0xe2, 0xf2, 0x33,
	0xa2, 0x27, 0xcb, 0x4e, 0x79, 0x08, 0x23, 0xec, 0x98, 0x46, 0x46, 0x71, 0x12, 0x93, 0xd9, 0x20,
	0x8d, 0x8c, 0x62, 0x67, 0x74, 0xfc, 0x5a, 0x6a, 0xdf, 0x24, 0x78, 0x14, 0x93, 0xd9, 0x24, 0xed,
	0xb8, 0xf1, 0xa0, 0xc4, 0x1c, 0x56, 0xda, 0xf3, 0x7e, 0xdc, 0x6f, 0xbc, 0x3d, 0xb3, 0x53, 0x3a,
	0x7e, 0x76, 0x50, 0xda, 0xcc, 0x28, 0x3e, 0x08, 0x73, 0xa3, 0xc0, 0xf7, 0xa1, 0x52, 0x69, 0xa9,
	0x0a, 0xb3, 0xd6, 0xfc, 0x5f, 0x4c, 0x66, 0xfd, 0xb4, 0x63, 0x36, 0xa5, 0x43, 0x8f, 0x12, 0x4b,
	0xcf, 0x87, 0x61, 0xa8, 0x25, 0xc6, 0xe9, 0x28, 0x77, 0x5a, 0x22, 0x38, 0x3e, 0xda, 0xb5, 0xb5,
	0xc8, 0x2e, 0x28, 0x0d, 0x47, 0xad, 0x32, 0x89, 0x7c, 0x1c, 0xfa, 0x26, 0xad, 0x72, 0x8b, 0x8d,
	0x8d, 0x80, 0xb2, 0xc8, 0x2c, 0x40, 0xc1, 0x27, 0x3b, 0x3b, 0x28, 0x4b, 0x80, 0x82, 0x5d, 0xd1,
	0xa3, 0xf6, 0xca, 0x21, 0xe0, 0x39, 0x0d, 0xef, 0xf8, 0xdf, 0x8a, 0x4d, 0xc6, 0xdf, 0xdd, 0x7c,
	0x55, 0x82, 0x6c, 0x2b, 0x41, 0x7e, 0x2a, 0x41, 0x3e, 0x6a, 0xd1, 0xdb, 0xd6, 0xa2, 0xf7, 0x5d,
	0x8b, 0xde, 0xe3, 0x79, 0xb7, 0x8a, 0xb7, 0xc3, 0x65, 0xe0, 0xbb, 0xd5, 0xfe, 0x69, 0x18, 0xbe,
	0xff, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xe1, 0x44, 0x03, 0xb0, 0x01, 0x00, 0x00,
}

func (m *PredictionMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredictionMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PredictionMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutcomePools) > 0 {
		for iNdEx := len(m.OutcomePools) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OutcomePools[iNdEx])
			copy(dAtA[i:], m.OutcomePools[iNdEx])
			i = encodeVarintPredictionMarket(dAtA, i, uint64(len(m.OutcomePools[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.TotalPool != 0 {
		i = encodeVarintPredictionMarket(dAtA, i, uint64(m.TotalPool))
		i--
		dAtA[i] = 0x48
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPredictionMarket(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPredictionMarket(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPredictionMarket(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if m.Deadline != 0 {
		i = encodeVarintPredictionMarket(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x28
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintPredictionMarket(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Outcomes) > 0 {
		for iNdEx := len(m.Outcomes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Outcomes[iNdEx])
			copy(dAtA[i:], m.Outcomes[iNdEx])
			i = encodeVarintPredictionMarket(dAtA, i, uint64(len(m.Outcomes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Question) > 0 {
		i -= len(m.Question)
		copy(dAtA[i:], m.Question)
		i = encodeVarintPredictionMarket(dAtA, i, uint64(len(m.Question)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPredictionMarket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPredictionMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPredictionMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PredictionMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPredictionMarket(uint64(m.Id))
	}
	l = len(m.Question)
	if l > 0 {
		n += 1 + l + sovPredictionMarket(uint64(l))
	}
	if len(m.Outcomes) > 0 {
		for _, s := range m.Outcomes {
			l = len(s)
			n += 1 + l + sovPredictionMarket(uint64(l))
		}
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovPredictionMarket(uint64(l))
	}
	if m.Deadline != 0 {
		n += 1 + sovPredictionMarket(uint64(m.Deadline))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPredictionMarket(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPredictionMarket(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPredictionMarket(uint64(m.CreatedAt))
	}
	if m.TotalPool != 0 {
		n += 1 + sovPredictionMarket(uint64(m.TotalPool))
	}
	if len(m.OutcomePools) > 0 {
		for _, s := range m.OutcomePools {
			l = len(s)
			n += 1 + l + sovPredictionMarket(uint64(l))
		}
	}
	return n
}

func sovPredictionMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPredictionMarket(x uint64) (n int) {
	return sovPredictionMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PredictionMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictionMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictionMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictionMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictionMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPredictionMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Question = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcomes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictionMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPredictionMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outcomes = append(m.Outcomes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictionMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPredictionMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictionMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPredictionMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictionMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPredictionMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPool", wireType)
			}
			m.TotalPool = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPool |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutcomePools", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictionMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictionMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPredictionMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutcomePools = append(m.OutcomePools, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictionMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPredictionMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPredictionMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPredictionMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPredictionMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPredictionMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPredictionMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPredictionMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPredictionMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPredictionMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPredictionMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPredictionMarket = fmt.Errorf("proto: unexpected end of group")
)

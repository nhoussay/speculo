// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: speculod/prediction/v1/order.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OrderSide represents whether an order is a buy or sell
type OrderSide int32

const (
	ORDER_SIDE_UNSPECIFIED OrderSide = 0
	ORDER_SIDE_BUY         OrderSide = 1
	ORDER_SIDE_SELL        OrderSide = 2
)

var OrderSide_name = map[int32]string{
	0: "ORDER_SIDE_UNSPECIFIED",
	1: "ORDER_SIDE_BUY",
	2: "ORDER_SIDE_SELL",
}

var OrderSide_value = map[string]int32{
	"ORDER_SIDE_UNSPECIFIED": 0,
	"ORDER_SIDE_BUY":         1,
	"ORDER_SIDE_SELL":        2,
}

func (x OrderSide) String() string {
	return proto.EnumName(OrderSide_name, int32(x))
}

func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_721bec0035e66f8a, []int{0}
}

// OrderStatus represents the current status of an order
type OrderStatus int32

const (
	ORDER_STATUS_UNSPECIFIED      OrderStatus = 0
	ORDER_STATUS_OPEN             OrderStatus = 1
	ORDER_STATUS_PARTIALLY_FILLED OrderStatus = 2
	ORDER_STATUS_FILLED           OrderStatus = 3
	ORDER_STATUS_CANCELLED        OrderStatus = 4
)

var OrderStatus_name = map[int32]string{
	0: "ORDER_STATUS_UNSPECIFIED",
	1: "ORDER_STATUS_OPEN",
	2: "ORDER_STATUS_PARTIALLY_FILLED",
	3: "ORDER_STATUS_FILLED",
	4: "ORDER_STATUS_CANCELLED",
}

var OrderStatus_value = map[string]int32{
	"ORDER_STATUS_UNSPECIFIED":      0,
	"ORDER_STATUS_OPEN":             1,
	"ORDER_STATUS_PARTIALLY_FILLED": 2,
	"ORDER_STATUS_FILLED":           3,
	"ORDER_STATUS_CANCELLED":        4,
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}

func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_721bec0035e66f8a, []int{1}
}

// Order represents a buy or sell order in the order book
type Order struct {
	Id           uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MarketId     uint64      `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Creator      string      `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Side         OrderSide   `protobuf:"varint,4,opt,name=side,proto3,enum=speculod.prediction.v1.OrderSide" json:"side,omitempty"`
	OutcomeIndex uint32      `protobuf:"varint,5,opt,name=outcome_index,json=outcomeIndex,proto3" json:"outcome_index,omitempty"`
	Price        string      `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	Amount       *types.Coin `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	FilledAmount *types.Coin `protobuf:"bytes,8,opt,name=filled_amount,json=filledAmount,proto3" json:"filled_amount,omitempty"`
	Status       OrderStatus `protobuf:"varint,9,opt,name=status,proto3,enum=speculod.prediction.v1.OrderStatus" json:"status,omitempty"`
	CreatedAt    int64       `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_721bec0035e66f8a, []int{0}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Order) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *Order) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Order) GetSide() OrderSide {
	if m != nil {
		return m.Side
	}
	return ORDER_SIDE_UNSPECIFIED
}

func (m *Order) GetOutcomeIndex() uint32 {
	if m != nil {
		return m.OutcomeIndex
	}
	return 0
}

func (m *Order) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *Order) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Order) GetFilledAmount() *types.Coin {
	if m != nil {
		return m.FilledAmount
	}
	return nil
}

func (m *Order) GetStatus() OrderStatus {
	if m != nil {
		return m.Status
	}
	return ORDER_STATUS_UNSPECIFIED
}

func (m *Order) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

// OrderBook represents the order book for a specific market and outcome
type OrderBook struct {
	MarketId     uint64   `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	OutcomeIndex uint32   `protobuf:"varint,2,opt,name=outcome_index,json=outcomeIndex,proto3" json:"outcome_index,omitempty"`
	Bids         []*Order `protobuf:"bytes,3,rep,name=bids,proto3" json:"bids,omitempty"`
	Asks         []*Order `protobuf:"bytes,4,rep,name=asks,proto3" json:"asks,omitempty"`
}

func (m *OrderBook) Reset()         { *m = OrderBook{} }
func (m *OrderBook) String() string { return proto.CompactTextString(m) }
func (*OrderBook) ProtoMessage()    {}
func (*OrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_721bec0035e66f8a, []int{1}
}
func (m *OrderBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBook.Merge(m, src)
}
func (m *OrderBook) XXX_Size() int {
	return m.Size()
}
func (m *OrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBook proto.InternalMessageInfo

func (m *OrderBook) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *OrderBook) GetOutcomeIndex() uint32 {
	if m != nil {
		return m.OutcomeIndex
	}
	return 0
}

func (m *OrderBook) GetBids() []*Order {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *OrderBook) GetAsks() []*Order {
	if m != nil {
		return m.Asks
	}
	return nil
}

// OrderBookEntry represents a single entry in the order book
type OrderBookEntry struct {
	Price       string      `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	TotalAmount *types.Coin `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	OrderCount  uint32      `protobuf:"varint,3,opt,name=order_count,json=orderCount,proto3" json:"order_count,omitempty"`
}

func (m *OrderBookEntry) Reset()         { *m = OrderBookEntry{} }
func (m *OrderBookEntry) String() string { return proto.CompactTextString(m) }
func (*OrderBookEntry) ProtoMessage()    {}
func (*OrderBookEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_721bec0035e66f8a, []int{2}
}
func (m *OrderBookEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBookEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBookEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBookEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBookEntry.Merge(m, src)
}
func (m *OrderBookEntry) XXX_Size() int {
	return m.Size()
}
func (m *OrderBookEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBookEntry.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBookEntry proto.InternalMessageInfo

func (m *OrderBookEntry) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *OrderBookEntry) GetTotalAmount() *types.Coin {
	if m != nil {
		return m.TotalAmount
	}
	return nil
}

func (m *OrderBookEntry) GetOrderCount() uint32 {
	if m != nil {
		return m.OrderCount
	}
	return 0
}

func init() {
	proto.RegisterEnum("speculod.prediction.v1.OrderSide", OrderSide_name, OrderSide_value)
	proto.RegisterEnum("speculod.prediction.v1.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterType((*Order)(nil), "speculod.prediction.v1.Order")
	proto.RegisterType((*OrderBook)(nil), "speculod.prediction.v1.OrderBook")
	proto.RegisterType((*OrderBookEntry)(nil), "speculod.prediction.v1.OrderBookEntry")
}

func init() {
	proto.RegisterFile("speculod/prediction/v1/order.proto", fileDescriptor_721bec0035e66f8a)
}

var fileDescriptor_721bec0035e66f8a = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x4e, 0xdb, 0x4a,
	0x14, 0xcd, 0xd8, 0x26, 0x90, 0x1b, 0xc8, 0xcb, 0x1b, 0x28, 0x9d, 0x86, 0xe2, 0x9a, 0xb0, 0xb1,
	0x58, 0xd8, 0x0a, 0x15, 0xab, 0x56, 0x95, 0x42, 0x62, 0x24, 0x4b, 0x11, 0x20, 0x07, 0x2a, 0xd1,
	0x8d, 0xe5, 0xd8, 0x53, 0x34, 0x22, 0xc9, 0x44, 0xf6, 0x04, 0xc1, 0x07, 0x54, 0xea, 0xae, 0xfd,
	0x84, 0x4a, 0xfd, 0x84, 0xfe, 0x44, 0x97, 0x2c, 0xbb, 0xac, 0xe0, 0x47, 0x2a, 0x8f, 0x1d, 0x48,
	0x28, 0x82, 0xee, 0x32, 0xe7, 0x9e, 0x33, 0x73, 0xcf, 0xb9, 0xf1, 0x85, 0x7a, 0x32, 0xa2, 0xe1,
	0xb8, 0xcf, 0x23, 0x7b, 0x14, 0xd3, 0x88, 0x85, 0x82, 0xf1, 0xa1, 0x7d, 0xde, 0xb0, 0x79, 0x1c,
	0xd1, 0xd8, 0x1a, 0xc5, 0x5c, 0x70, 0xbc, 0x3a, 0xe1, 0x58, 0x77, 0x1c, 0xeb, 0xbc, 0x51, 0x5b,
	0x39, 0xe5, 0xa7, 0x5c, 0x52, 0xec, 0xf4, 0x57, 0xc6, 0xae, 0xe9, 0x21, 0x4f, 0x06, 0x3c, 0xb1,
	0x7b, 0x41, 0x42, 0xed, 0xf3, 0x46, 0x8f, 0x8a, 0xa0, 0x61, 0x87, 0x9c, 0x0d, 0xb3, 0x7a, 0xfd,
	0x8b, 0x0a, 0x73, 0x07, 0xe9, 0xed, 0xb8, 0x02, 0x0a, 0x8b, 0x08, 0x32, 0x90, 0xa9, 0x79, 0x0a,
	0x8b, 0xf0, 0x1a, 0x94, 0x06, 0x41, 0x7c, 0x46, 0x85, 0xcf, 0x22, 0xa2, 0x48, 0x78, 0x21, 0x03,
	0xdc, 0x08, 0x13, 0x98, 0x0f, 0x63, 0x1a, 0x08, 0x1e, 0x13, 0xd5, 0x40, 0x66, 0xc9, 0x9b, 0x1c,
	0xf1, 0x0e, 0x68, 0x09, 0x8b, 0x28, 0xd1, 0x0c, 0x64, 0x56, 0xb6, 0x37, 0xac, 0x87, 0xbb, 0xb5,
	0xe4, 0x9b, 0x5d, 0x16, 0x51, 0x4f, 0xd2, 0xf1, 0x26, 0x2c, 0xf1, 0xb1, 0x08, 0xf9, 0x80, 0xfa,
	0x6c, 0x18, 0xd1, 0x0b, 0x32, 0x67, 0x20, 0x73, 0xc9, 0x5b, 0xcc, 0x41, 0x37, 0xc5, 0xf0, 0x0a,
	0xcc, 0x8d, 0x62, 0x16, 0x52, 0x52, 0x94, 0x6f, 0x66, 0x07, 0xdc, 0x80, 0x62, 0x30, 0xe0, 0xe3,
	0xa1, 0x20, 0xf3, 0x06, 0x32, 0xcb, 0xdb, 0x2f, 0xac, 0xcc, 0xb3, 0x95, 0x7a, 0xb6, 0x72, 0xcf,
	0x56, 0x8b, 0xb3, 0xa1, 0x97, 0x13, 0xf1, 0x3b, 0x58, 0xfa, 0xc8, 0xfa, 0x7d, 0x1a, 0xf9, 0xb9,
	0x72, 0xe1, 0x29, 0xe5, 0x62, 0xc6, 0x6f, 0x66, 0xfa, 0x37, 0x50, 0x4c, 0x44, 0x20, 0xc6, 0x09,
	0x29, 0x49, 0x9b, 0x9b, 0x8f, 0xdb, 0x94, 0x54, 0x2f, 0x97, 0xe0, 0x75, 0x00, 0x19, 0x56, 0xfa,
	0xba, 0x20, 0x60, 0x20, 0x53, 0xf5, 0x4a, 0x39, 0xd2, 0x14, 0xf5, 0x1f, 0x08, 0x4a, 0x52, 0xb6,
	0xcb, 0xf9, 0xd9, 0xec, 0x14, 0xd0, 0xbd, 0x29, 0xfc, 0x15, 0x9a, 0xf2, 0x40, 0x68, 0x0d, 0xd0,
	0x7a, 0x2c, 0x4a, 0x88, 0x6a, 0xa8, 0x66, 0x79, 0x7b, 0xfd, 0xd1, 0x4e, 0x3d, 0x49, 0x4d, 0x25,
	0x41, 0x72, 0x96, 0x10, 0xed, 0x9f, 0x24, 0x29, 0xb5, 0xfe, 0x09, 0x41, 0xe5, 0xb6, 0x6b, 0x67,
	0x28, 0xe2, 0xcb, 0xbb, 0x69, 0xa1, 0xe9, 0x69, 0xbd, 0x85, 0x45, 0xc1, 0x45, 0xd0, 0x9f, 0x24,
	0xaf, 0x3c, 0x95, 0x7c, 0x59, 0xd2, 0xf3, 0xe0, 0x5f, 0x41, 0x59, 0x7e, 0x0b, 0x7e, 0x28, 0xc5,
	0xaa, 0xf4, 0x0b, 0x12, 0x6a, 0xa5, 0xc8, 0xd6, 0xfb, 0x3c, 0xbc, 0xf4, 0xaf, 0x85, 0x6b, 0xb0,
	0x7a, 0xe0, 0xb5, 0x1d, 0xcf, 0xef, 0xba, 0x6d, 0xc7, 0x3f, 0xde, 0xef, 0x1e, 0x3a, 0x2d, 0x77,
	0xcf, 0x75, 0xda, 0xd5, 0x02, 0xc6, 0x50, 0x99, 0xaa, 0xed, 0x1e, 0x9f, 0x54, 0x11, 0x5e, 0x86,
	0xff, 0xa6, 0xb0, 0xae, 0xd3, 0xe9, 0x54, 0x95, 0x9a, 0xf6, 0xf9, 0xbb, 0x5e, 0xd8, 0xfa, 0x86,
	0xa0, 0x3c, 0x35, 0x4c, 0xfc, 0x12, 0x48, 0x4e, 0x3d, 0x6a, 0x1e, 0x1d, 0x77, 0xef, 0x5d, 0xfe,
	0x0c, 0xfe, 0x9f, 0xa9, 0x1e, 0x1c, 0x3a, 0xfb, 0x55, 0x84, 0x37, 0x60, 0x7d, 0x06, 0x3e, 0x6c,
	0x7a, 0x47, 0x6e, 0xb3, 0xd3, 0x39, 0xf1, 0xf7, 0xdc, 0x4e, 0xc7, 0x69, 0x57, 0x15, 0xfc, 0x1c,
	0x96, 0x67, 0x28, 0x79, 0x41, 0x9d, 0xf2, 0x92, 0x15, 0x5a, 0xcd, 0xfd, 0x96, 0x23, 0x6b, 0x5a,
	0xd6, 0xe2, 0xee, 0xce, 0xcf, 0x6b, 0x1d, 0x5d, 0x5d, 0xeb, 0xe8, 0xf7, 0xb5, 0x8e, 0xbe, 0xde,
	0xe8, 0x85, 0xab, 0x1b, 0xbd, 0xf0, 0xeb, 0x46, 0x2f, 0x7c, 0x58, 0xbb, 0x5d, 0x2b, 0x17, 0xd3,
	0x8b, 0x45, 0x5c, 0x8e, 0x68, 0xd2, 0x2b, 0xca, 0x45, 0xf0, 0xfa, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x3e, 0x7e, 0x48, 0xa6, 0x7c, 0x04, 0x00, 0x00,
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x50
	}
	if m.Status != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.FilledAmount != nil {
		{
			size, err := m.FilledAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x32
	}
	if m.OutcomeIndex != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.OutcomeIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.Side != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MarketId != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Asks) > 0 {
		for iNdEx := len(m.Asks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Asks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.OutcomeIndex != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.OutcomeIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.MarketId != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderBookEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBookEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBookEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderCount != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.OrderCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalAmount != nil {
		{
			size, err := m.TotalAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOrder(uint64(m.Id))
	}
	if m.MarketId != 0 {
		n += 1 + sovOrder(uint64(m.MarketId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Side != 0 {
		n += 1 + sovOrder(uint64(m.Side))
	}
	if m.OutcomeIndex != 0 {
		n += 1 + sovOrder(uint64(m.OutcomeIndex))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.FilledAmount != nil {
		l = m.FilledAmount.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovOrder(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovOrder(uint64(m.CreatedAt))
	}
	return n
}

func (m *OrderBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovOrder(uint64(m.MarketId))
	}
	if m.OutcomeIndex != 0 {
		n += 1 + sovOrder(uint64(m.OutcomeIndex))
	}
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovOrder(uint64(l))
		}
	}
	if len(m.Asks) > 0 {
		for _, e := range m.Asks {
			l = e.Size()
			n += 1 + l + sovOrder(uint64(l))
		}
	}
	return n
}

func (m *OrderBookEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.TotalAmount != nil {
		l = m.TotalAmount.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.OrderCount != 0 {
		n += 1 + sovOrder(uint64(m.OrderCount))
	}
	return n
}

func sovOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= OrderSide(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutcomeIndex", wireType)
			}
			m.OutcomeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutcomeIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FilledAmount == nil {
				m.FilledAmount = &types.Coin{}
			}
			if err := m.FilledAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutcomeIndex", wireType)
			}
			m.OutcomeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutcomeIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, &Order{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asks = append(m.Asks, &Order{})
			if err := m.Asks[len(m.Asks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderBookEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBookEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBookEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalAmount == nil {
				m.TotalAmount = &types.Coin{}
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCount", wireType)
			}
			m.OrderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrder = fmt.Errorf("proto: unexpected end of group")
)

syntax = "proto3";

package speculod.prediction.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "speculod/x/prediction/types";

// OrderSide represents whether an order is a buy or sell
enum OrderSide {
  option (gogoproto.goproto_enum_prefix) = false;
  
  ORDER_SIDE_UNSPECIFIED = 0;
  ORDER_SIDE_BUY = 1;
  ORDER_SIDE_SELL = 2;
}

// OrderStatus represents the current status of an order
enum OrderStatus {
  option (gogoproto.goproto_enum_prefix) = false;
  
  ORDER_STATUS_UNSPECIFIED = 0;
  ORDER_STATUS_OPEN = 1;
  ORDER_STATUS_PARTIALLY_FILLED = 2;
  ORDER_STATUS_FILLED = 3;
  ORDER_STATUS_CANCELLED = 4;
}

// Order represents a buy or sell order in the order book
message Order {
  uint64 id = 1;
  uint64 market_id = 2;
  string creator = 3;
  OrderSide side = 4;
  uint32 outcome_index = 5;
  string price = 6; // Price as string (e.g., "0.5")
  cosmos.base.v1beta1.Coin amount = 7;
  cosmos.base.v1beta1.Coin filled_amount = 8;
  OrderStatus status = 9;
  int64 created_at = 10;
}

// OrderBook represents the order book for a specific market and outcome
message OrderBook {
  uint64 market_id = 1;
  uint32 outcome_index = 2;
  repeated Order bids = 3; // Sorted by price DESC, then time ASC
  repeated Order asks = 4; // Sorted by price ASC, then time ASC
}

// OrderBookEntry represents a single entry in the order book
message OrderBookEntry {
  string price = 1;
  cosmos.base.v1beta1.Coin total_amount = 2;
  uint32 order_count = 3;
} 
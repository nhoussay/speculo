syntax = "proto3";

package speculod.prediction.v1;

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "speculod/prediction/v1/params.proto";

option go_package = "speculod/x/prediction/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc CreateMarket(MsgCreateMarket) returns (MsgCreateMarketResponse);
  rpc PostOrder(MsgPostOrder) returns (MsgPostOrderResponse);
  rpc CancelOrder(MsgCancelOrder) returns (MsgCancelOrderResponse);
  rpc FillOrder(MsgFillOrder) returns (MsgFillOrderResponse);
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// Define MsgCreateMarket, MsgPostOrder, MsgCancelOrder, MsgFillOrder messages here
message MsgCreateMarket {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string question = 2;
  repeated string outcomes = 3;
  string group_id = 4;
  int64 deadline = 5;
  cosmos.base.v1beta1.Coin initial_pool = 6;
}
message MsgCreateMarketResponse {
  uint64 market_id = 1;
  string status = 2;
}

message MsgPostOrder {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 market_id = 2;
  uint32 outcome_index = 3;
  string side = 4; // "BUY" or "SELL"
  string price = 5; // Price as string (e.g., "0.5")
  cosmos.base.v1beta1.Coin amount = 6;
}
message MsgPostOrderResponse {
  uint64 order_id = 1;
  string status = 2;
  repeated Trade trades = 3;
}

message MsgCancelOrder {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 order_id = 2;
}
message MsgCancelOrderResponse {
  string status = 1;
}

message MsgFillOrder {
  option (cosmos.msg.v1.signer) = "filler";
  string filler = 1;
  uint64 order_id = 2;
  cosmos.base.v1beta1.Coin amount = 3;
}
message MsgFillOrderResponse {
  string status = 1;
  repeated Trade trades = 2;
}

// Trade represents a completed trade
message Trade {
  uint64 trade_id = 1;
  uint64 market_id = 2;
  uint32 outcome_index = 3;
  string buyer = 4;
  string seller = 5;
  string price = 6; // Price as string
  cosmos.base.v1beta1.Coin amount = 7;
  int64 timestamp = 8;
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "speculod/x/prediction/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}